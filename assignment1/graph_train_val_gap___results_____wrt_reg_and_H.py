from collections import OrderedDict
import numpy as np
import matplotlib.pyplot as plt

results=OrderedDict()
#         lr  , reg  , H , epochs       val - train
results[(0.002, 1e-07, 50, 5280)]                  =-0.281
results[(0.002, 1e-07, 65, 5280)]                  =-0.29100000000000004
results[(0.002, 1e-07, 83, 5280)]                  =-0.241
results[(0.002, 1e-07, 108, 5280)]                 =-0.25399999999999995
results[(0.002, 1e-07, 139, 5280)]                 =-0.342
results[(0.002, 1e-07, 180, 5280)]                 =-0.44800000000000006
results[(0.002, 1e-07, 232, 5280)]                 =-0.31799999999999995
results[(0.002, 1e-07, 300, 5280)]                 =-0.39199999999999996
results[(0.002, 1e-07, 387, 5280)]                 =-0.377
results[(0.002, 1e-07, 500, 5280)]                 =-0.353
results[(0.002, 1.4677992676220705e-06, 50, 5280)] =-0.248
results[(0.002, 1.4677992676220705e-06, 65, 5280)] =-0.21899999999999997
results[(0.002, 1.4677992676220705e-06, 83, 5280)] =-0.347
results[(0.002, 1.4677992676220705e-06, 108, 5280)]=-0.31700000000000006
results[(0.002, 1.4677992676220705e-06, 139, 5280)]=-0.309
results[(0.002, 1.4677992676220705e-06, 180, 5280)]=-0.3350000000000001
results[(0.002, 1.4677992676220705e-06, 232, 5280)]=-0.348
results[(0.002, 1.4677992676220705e-06, 300, 5280)]=-0.296
results[(0.002, 1.4677992676220705e-06, 387, 5280)]=-0.32999999999999996
results[(0.002, 1.4677992676220705e-06, 500, 5280)]=-0.377
results[(0.002, 2.1544346900318867e-05, 50, 5280)] =-0.21399999999999997
results[(0.002, 2.1544346900318867e-05, 65, 5280)] =-0.32800000000000007
results[(0.002, 2.1544346900318867e-05, 83, 5280)] =-0.296
results[(0.002, 2.1544346900318867e-05, 108, 5280)]=-0.247
results[(0.002, 2.1544346900318867e-05, 139, 5280)]=-0.375
results[(0.002, 2.1544346900318867e-05, 180, 5280)]=-0.376
results[(0.002, 2.1544346900318867e-05, 232, 5280)]=-0.33799999999999997
results[(0.002, 2.1544346900318867e-05, 300, 5280)]=-0.32400000000000007
results[(0.002, 2.1544346900318867e-05, 387, 5280)]=-0.265
results[(0.002, 2.1544346900318867e-05, 500, 5280)]=-0.32799999999999996
results[(0.002, 0.00031622776601683794, 50, 5280)] =-0.264
results[(0.002, 0.00031622776601683794, 65, 5280)] =-0.267
results[(0.002, 0.00031622776601683794, 83, 5280)] =-0.25999999999999995
results[(0.002, 0.00031622776601683794, 108, 5280)]=-0.22500000000000003
results[(0.002, 0.00031622776601683794, 139, 5280)]=-0.32100000000000006
results[(0.002, 0.00031622776601683794, 180, 5280)]=-0.28700000000000003
results[(0.002, 0.00031622776601683794, 232, 5280)]=-0.31600000000000006
results[(0.002, 0.00031622776601683794, 300, 5280)]=-0.382
results[(0.002, 0.00031622776601683794, 387, 5280)]=-0.41300000000000003
results[(0.002, 0.00031622776601683794, 500, 5280)]=-0.391
results[(0.002, 0.004641588833612782, 50, 5280)]   =-0.29600000000000004
results[(0.002, 0.004641588833612782, 65, 5280)]   =-0.28
results[(0.002, 0.004641588833612782, 83, 5280)]   =-0.252
results[(0.002, 0.004641588833612782, 108, 5280)]  =-0.281
results[(0.002, 0.004641588833612782, 139, 5280)]  =-0.31399999999999995
results[(0.002, 0.004641588833612782, 180, 5280)]  =-0.32699999999999996
results[(0.002, 0.004641588833612782, 232, 5280)]  =-0.309
results[(0.002, 0.004641588833612782, 300, 5280)]  =-0.29600000000000004
results[(0.002, 0.004641588833612782, 387, 5280)]  =-0.31999999999999995
results[(0.002, 0.004641588833612782, 500, 5280)]  =-0.318
results[(0.002, 0.06812920690579623, 50, 5280)]    =-0.21899999999999997
results[(0.002, 0.06812920690579623, 65, 5280)]    =-0.30300000000000005
results[(0.002, 0.06812920690579623, 83, 5280)]    =-0.362
results[(0.002, 0.06812920690579623, 108, 5280)]   =-0.35800000000000004
results[(0.002, 0.06812920690579623, 139, 5280)]   =-0.20399999999999996
results[(0.002, 0.06812920690579623, 180, 5280)]   =-0.358
results[(0.002, 0.06812920690579623, 232, 5280)]   =-0.272
results[(0.002, 0.06812920690579623, 300, 5280)]   =-0.258
results[(0.002, 0.06812920690579623, 387, 5280)]   =-0.361
results[(0.002, 0.06812920690579623, 500, 5280)]   =-0.33399999999999996
results[(0.002, 1.0, 50, 5280)]                    =-0.16799999999999998
results[(0.002, 1.0, 65, 5280)]                    =-0.133
results[(0.002, 1.0, 83, 5280)]                    =-0.17900000000000005
results[(0.002, 1.0, 108, 5280)]                   =-0.24599999999999994
results[(0.002, 1.0, 139, 5280)]                   =-0.18800000000000006
results[(0.002, 1.0, 180, 5280)]                   =-0.25999999999999995
results[(0.002, 1.0, 232, 5280)]                   =-0.22499999999999992
results[(0.002, 1.0, 300, 5280)]                   =-0.12299999999999994
results[(0.002, 1.0, 387, 5280)]                   =-0.237
results[(0.002, 1.0, 500, 5280)]                   =-0.24599999999999994


# Get data to plot.
REG=1
H=2
xs_reg  = [k[REG] for k in results]
xs_H    = [k[H] for k in results]
ys      = [val for val in results.values()]

#===================================================================================================
# Take means on the y axis
#===================================================================================================
reg_bins=OrderedDict()
H_bins=OrderedDict()

# 1st, collect scores in lists
for hyperparams, score in results.items():
  #hidden layer number of neurons:
  h=hyperparams[H]
  if h in H_bins:
    H_bins[h].append(score)
  else:
    H_bins[h]=[score]

  reg=hyperparams[REG]
  if reg in reg_bins:
    reg_bins[reg].append(score)
  else:
    reg_bins[reg]=[score]

# 2nd, take means (divide):
Hs=list(H_bins.keys())
for H in Hs:
  H_bins[H] = np.mean(H_bins[H])
regs=list(reg_bins.keys())
for reg in regs:
  reg_bins[reg] = np.mean(reg_bins[reg])

# plot reg
plt.title('Reg')
plt.xscale('log')
print("xs_reg: ",xs_reg)
# all pts:
plt.scatter(xs_reg, ys, s=10, c='r', alpha=1.)
# means:
xs_reg_means=list(reg_bins.keys())
ys_reg_means=list(reg_bins.values())
plt.scatter(xs_reg_means, ys_reg_means, s=30, c='g', alpha=1.)
plt.xlabel('Regularization Strengths')
plt.ylabel('Val - Train accuracies')
plt.grid(True)
plt.show()

# plot hiddens
plt.title('Hidden layer ')
plt.xscale('log')
plt.scatter(xs_H, ys, s=10, c='r', alpha=1.)
xs_H_means=list(H_bins.keys())
ys_H_means=list(H_bins.values())
plt.scatter(xs_H_means, ys_H_means, s=30, c='g', alpha=1.)
plt.xlabel('Number of neurons in the hidden layer')
plt.ylabel('Val - Train accuracies')
plt.grid(True)
plt.show()
